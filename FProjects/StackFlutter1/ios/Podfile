platform :ios, '12.0'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks!
  use_modular_headers!

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
  
  # Fix for AppAuth
  pod 'AppAuth', '~> 1.7.0'
  pod 'GTMSessionFetcher', :modular_headers => true

  post_install do |installer|
    installer.pods_project.targets.each do |target|
      flutter_additional_ios_build_settings(target)
      
      # Fix script phase issues
      target.build_phases.each do |build_phase|
        if build_phase.respond_to?(:name) && build_phase.name.start_with?("[CP]")
          build_phase.always_out_of_date = "1"
        end
      end
      
      target.build_configurations.each do |config|
        # Set Swift version for all targets
        config.build_settings['SWIFT_VERSION'] = '5.0'
        
        # Flutter additional settings
        config.build_settings['ENABLE_BITCODE'] = 'NO'
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '12.0'
        config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'i386'
        config.build_settings['ONLY_ACTIVE_ARCH'] = 'YES'
        config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
        config.build_settings['ENABLE_USER_SCRIPT_SANDBOXING'] = 'NO'
        
        # Fix for modules that need DEFINES_MODULE
        if ['GTMSessionFetcher', 'sign_in_with_apple', 'permission_handler_apple'].include?(target.name)
          config.build_settings['DEFINES_MODULE'] = 'YES'
        end

        # Fix GTMSessionFetcher include issues
        if target.name.to_s.include?('GTMSessionFetcher')
          config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'GTMSESSION_BUILDER=1'
          config.build_settings['HEADER_SEARCH_PATHS'] ||= ['$(inherited)']
          config.build_settings['HEADER_SEARCH_PATHS'] << '${PODS_ROOT}/GTMSessionFetcher/Source'
        end

        # Fix Flutter.h not found and framework include issues
        if target.name.to_s == 'permission_handler_apple' || (target.respond_to?(:product_name) && target.product_name.to_s.include?('permission_handler'))
          config.build_settings['HEADER_SEARCH_PATHS'] ||= ['$(inherited)']
          config.build_settings['HEADER_SEARCH_PATHS'] << '${PODS_ROOT}/Flutter'
          config.build_settings['HEADER_SEARCH_PATHS'] << '${PODS_CONFIGURATION_BUILD_DIR}/Flutter'
          
          config.build_settings['FRAMEWORK_SEARCH_PATHS'] ||= ['$(inherited)']
          config.build_settings['FRAMEWORK_SEARCH_PATHS'] << '${PODS_ROOT}/Flutter'
          config.build_settings['FRAMEWORK_SEARCH_PATHS'] << '${PODS_CONFIGURATION_BUILD_DIR}/Flutter'
          
          config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
          config.build_settings['DEFINES_MODULE'] = 'YES'
        end
        
        # Make build phases more reliable
        config.build_settings['EXPANDED_CODE_SIGN_IDENTITY'] = ''
        config.build_settings['CODE_SIGNING_REQUIRED'] = 'NO'
        config.build_settings['STRIP_INSTALLED_PRODUCT'] = 'NO'
        
        # Add additional framework search paths
        config.build_settings['FRAMEWORK_SEARCH_PATHS'] ||= ['$(inherited)']
        config.build_settings['FRAMEWORK_SEARCH_PATHS'] << '${PODS_ROOT}/Flutter'
        config.build_settings['FRAMEWORK_SEARCH_PATHS'] << '${PODS_CONFIGURATION_BUILD_DIR}'
        
        # Fix code signing settings
        config.build_settings['CODE_SIGN_IDENTITY'] = ''
        config.build_settings['PROVISIONING_PROFILE_SPECIFIER'] = ''
        config.build_settings['CODE_SIGN_ENTITLEMENTS'] = ''
        
        # Fix for Xcode 15 resource bundle signing issues
        if config.build_settings['PRODUCT_BUNDLE_IDENTIFIER'] =~ /org\.cocoapods\./
          config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
        end
      end

      # Patch double-quoted includes to angle-bracketed in Pods
      if target.respond_to?(:source_build_phase) && target.source_build_phase
        target.source_build_phase.files.each do |file|
          if file.file_ref.path =~ /GTM.*\.h$/
            text = File.read(file.file_ref.real_path)
            text.gsub!(/#import \"(GTM.*\.h)\"/, '#import <' + '\1' + '>')
            File.write(file.file_ref.real_path, text)
          end
        end
      end

      # Patch double-quoted includes to angle-bracketed for Google/Firebase AppCheck headers
      if target.respond_to?(:source_build_phase) && target.source_build_phase
        target.source_build_phase.files.each do |file|
          if file.file_ref.path =~ /GACAppCheck.*\.h$/
            text = File.read(file.file_ref.real_path)
            text.gsub!(/#import \"(GACAppCheck.*\.h)\"/, '#import <\1>')
            File.write(file.file_ref.real_path, text)
          end
        end
      end

      # Patch double-quoted includes to angle-bracketed for Firebase headers
      if target.respond_to?(:source_build_phase) && target.source_build_phase
        target.source_build_phase.files.each do |file|
          if file.file_ref.path =~ /Firebase.*\.h$/
            text = File.read(file.file_ref.real_path)
            text.gsub!(/#import \"(Firebase.*\.h)\"/, '#import <\1>')
            File.write(file.file_ref.real_path, text)
          end
        end
      end

      # Patch double-quoted includes to angle-bracketed for Google headers
      if target.respond_to?(:source_build_phase) && target.source_build_phase
        target.source_build_phase.files.each do |file|
          if file.file_ref.path =~ /Google.*\.h$/
            text = File.read(file.file_ref.real_path)
            text.gsub!(/#import \"(Google.*\.h)\"/, '#import <\1>')
            File.write(file.file_ref.real_path, text)
          end
        end
      end

      # Patch double-quoted includes to angle-bracketed for GoogleUtilities headers
      if target.respond_to?(:source_build_phase) && target.source_build_phase && target.name == 'GoogleUtilities'
        target.source_build_phase.files.each do |file|
          if file.file_ref.path =~ /GUL.*\.h$/
            text = File.read(file.file_ref.real_path)
            text.gsub!(/#import \"(GUL.*\.h)\"/, '#import <\1>')
            File.write(file.file_ref.real_path, text)
          end
        end
      end
    end
  end
end 